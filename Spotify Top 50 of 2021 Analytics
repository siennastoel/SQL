--For this project, I downloaded the Spotify Top 50 Songs of 2021 from Kaggle.

-- Then I created a table to insert the data into.
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

-- Then I uploaded the Spotify Data .csv file into the table so I could explore the data using the following SQL.

-- First, I determined the Top 10 most popular artists and songs.
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY  popularity desc
LIMIT 10;

-- Then I looked at the Top 10 artist with the most danceability.
SELECT artist_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(danceability) desc
LIMIT 10;

-- I determined which artist had the longest song in the Top 50.
SELECT artist_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1;

-- And which artist had the shortest song in the Top 50. 
SELECT artist_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms asc
LIMIT 1;

-- Finally, I wanted to see which artists were in the Top 50 more than once, and what their average popularity was of their songs.
SELECT artist_name, COUNT(artist_name) as times_in_top_50, AVG(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING times_in_top_50 >1
ORDER BY times_in_top_50 desc;
